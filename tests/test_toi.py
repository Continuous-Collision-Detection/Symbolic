import pathlib
import sys
import traceback

from wolframclient.language import Global

sys.path.append(str(pathlib.Path(__file__).resolve().parents[1] / "scripts"))
from utils import *  # noqa


def main():
    global session

    WolframKernel_path = (default_wolfram_kernel_path()
                          if len(sys.argv) < 2 else sys.argv[1])
    print(f"attempting to use {WolframKernel_path}")

    session = open_wolfram_language_session(WolframKernel_path)
    if not session:
        print("failed to open mathematica!")
        exit(1)

    src_dir = pathlib.Path(__file__).resolve().parents[1] / "src"
    load_wolfram_script(session, src_dir / "roots_vf.wl")
    load_wolfram_script(session, src_dir / "compare_toi.wl")

    # query = [
    #     ["0", "1", "-1", "1", "0", "1"],
    #     ["1", "1", "0", "1", "-1", "1"],
    #     ["0", "1", "0", "1", "1", "1"],
    #     ["-1", "1", "0", "1", "-1", "1"],
    #     ["0", "1", "1", "1", "0", "1"],
    #     ["1", "1", "0", "1", "-1", "1"],
    #     ["0", "1", "0", "1", "1", "1"],
    #     ["-1", "1", "0", "1", "-1", "1"]
    # ]

    # query = [
    #     ['6004799504361621', '36028797018963968', '8406719305025405', '18014398509481984', '6004799504361621', '36028797018963968'],
    #     ['5991880653447211', '18014398509481984', '1569622679492231', '1125899906842624', '3000580773410431', '9007199254740992'],
    #     ['5552384021537779', '36028797018963968', '895195853007905', '2251799813685248', '2884273913025777', '18014398509481984'],
    #     ['5994415962440743', '18014398509481984', '3143497780723795', '2251799813685248', '-4959467315358399', '18446744073709551616'],
    #     ['6004799504361621', '36028797018963968', '8406719305025405', '18014398509481984', '6004799504361621', '36028797018963968'],
    #     ['1446726186979235', '4503599627370496', '5675102972698969', '4503599627370496', '1505494021547267', '4503599627370496'],
    #     ['4687563062029645', '36028797018963968', '601912797734833', '2251799813685248', '1471332316398453', '9007199254740992'],
    #     ['2913215074912037', '9007199254740992', '5679403831262947', '4503599627370496', '6389336975038983', '18446744073709551616'],
    # ]

    # query = [
    #     ['1', '1', '1', '2', '0', '1'],
    #     ['1', '1', '1287637463602197', '2251799813685248', '1', '1'],
    #     ['1', '1', '5150549854408787', '9007199254740992', '-1592518156610665', '20282409603651670423947251286016'],
    #     ['1', '1', '3539437277287445', '2251799813685248', '9007199254740991', '9007199254740992'],
    #     ['1', '1', '1', '2', '0', '1'],
    #     ['1', '1', '5001272674527231', '18014398509481984', '9007199254740991', '9007199254740992'],
    #     ['1', '1', '5001272674527227', '18014398509481984', '-18138484381021', '10141204801825835211973625643008'],
    #     ['1', '1', '11238120695317', '8796093022208', '9007199254740991', '9007199254740992']
    # ]

    query = [
        ['1', '1', '1', '2', '0', '1'],
        ['1', '1', '1287637463602197', '2251799813685248', '1', '1'],
        ['1', '1', '5150549854408787', '9007199254740992', '-1592518156610665', '20282409603651670423947251286016'],  # noqa
        ['1', '1', '3539437277287445', '2251799813685248', '9007199254740991', '9007199254740992'],  # noqa
        ['1', '1', '1', '2', '0', '1'],
        ['1', '1', '5001272674527231', '18014398509481984', '9007199254740991', '9007199254740992'],  # noqa
        ['1', '1', '5001272674527227', '18014398509481984', '-18138484381021', '10141204801825835211973625643008'],  # noqa
        ['1', '1', '11238120695317', '8796093022208', '9007199254740991', '9007199254740992']  # noqa
    ]

    results = session.evaluate(Global.roots(query, "roots.wxf"))
    print(results)
    assert ("True" in results)

    # results = rules_to_dict(session.evaluate(Global.compareToI("roots.wxf", 49, 100)))
    # results = rules_to_dict(session.evaluate(Global.compareToI("roots.wxf", 243923, 1000000)))
    results = rules_to_dict(session.evaluate(
        Global.compareToI("roots.wxf", 0, 1)))
    print(results)


if __name__ == "__main__":
    session = None
    try:
        main()
    except:
        traceback.print_exc()
    finally:
        if session:
            session.terminate()
